use std

pkg proto9 =
	
	const Notag : uint16 = 0xffff
	const Nofid : uint32 = 0xffffffff

	const Bit8sz	: uint32 = 1
	const Bit16sz	: uint32 = 2
	const Bit32sz	: uint32 = 4
	const Bit64sz	: uint32 = 8
	const Qidsz	: uint32 = \
		Bit8sz + Bit32sz + Bit64sz
	const Statfixsz	: uint32 = \
		Bit16sz+Qidsz+5*Bit16sz+4*Bit32sz+1*Bit64sz

	const Tversion	: uint8 = 100
	const Rversion	: uint8 = 101
	const Tauth	: uint8 = 102
	const Rauth	: uint8 = 103
	const Tattach	: uint8 = 104
	const Rattach	: uint8 = 105
	const Rerror	: uint8 = 107
	const Tflush	: uint8 = 108
	const Rflush	: uint8 = 109
	const Twalk 	: uint8 = 110
	const Rwalk	: uint8 = 111
	const Topen	: uint8 = 112
	const Ropen	: uint8 = 113
	const Tcreate	: uint8 = 114
	const Rcreate	: uint8 = 115
	const Tread	: uint8 = 116
	const Rread	: uint8 = 117
	const Twrite	: uint8 = 118
	const Rwrite	: uint8 = 119
	const Tclunk	: uint8 = 120
	const Rclunk	: uint8 = 121
	const Tremove	: uint8 = 122
	const Rremove	: uint8 = 123
	const Tstat	: uint8 = 124
	const Rstat	: uint8 = 125
	const Twstat	: uint8 = 126
	const Rwstat	: uint8 = 127
	
	const Dmdir    : uint32 = 0x80000000
	const Dmappend : uint32 = 0x40000000
	const Dmexcl   : uint32 = 0x20000000
	const Dmmount  : uint32 = 0x10000000
	const Dmauth   : uint32 = 0x08000000
	const Dmtmp    : uint32 = 0x04000000
	const Dmread   : uint32 = 0x4
	const Dmwrite  : uint32 = 0x2
	const Dmexec   : uint32 = 0x1
	
	const Qtfile   : uint8 = 0x00
	const Qttmp    : uint8 = 0x04
	const Qtauth   : uint8 = 0x08
	const Qtmount  : uint8 = 0x10
	const Qtexcl   : uint8 = 0x20
	const Qtappend : uint8 = 0x40
	const Qtdir    : uint8 = 0x80
	
	type msg = union
		`Tversion version
		`Rversion version
		`Tauth tauth
		`Rauth rauth
		`Rerror rerror
		`Tflush tflush
		`Rflush rflush
		`Tattach tattach
		`Rattach rattach
		`Twalk twalk
		`Rwalk rwalk
		`Topen topen
		`Ropen ropen
		`Tcreate tcreate
		`Rcreate rcreate
		`Tread tread
		`Rread rread
		`Twrite twrite
		`Rwrite rwrite
		`Tstat tstat
		`Rstat rstat
		`Tclunk tclunk
		`Rclunk rclunk
		`Tremove tremove
		`Rremove rremove
		`Twstat twstat
		`Rwstat rwstat
	;;
	
	const qidlen : uint32 = 13
	
	type qid = struct
		ty	: uint8
		vers	: uint32
		path	: uint64
	;;

	type stat = struct
		ty	: uint16
		dev	: uint32
		qid	: qid
		mode	: uint32
		atime	: uint32
		mtime	: uint32
		len	: uint64
		name	: byte[:]
		uid	: byte[:]
		gid	: byte[:]
		muid	: byte[:]
	;;


	type version = struct
		tag	: uint16
		msize	: uint32
		version	: byte[:]
	;;

	type tauth = struct
		tag	: uint16
		afid	: uint32
		uname	: byte[:]
		aname	: byte[:]
	;;

	type rauth = struct
		tag	: uint16
		aqid	: qid
	;;

	type tattach = struct
		tag	: uint16
		fid	: uint32
		afid	: uint32
		uname	: byte[:]
		aname	: byte[:]
	;;
	
	type rattach = struct
		tag	: uint16
		qid	: qid
	;;

	type rerror = struct
		tag	: uint16
		err	: byte[:]
	;;

	type tflush = struct
		tag	: uint16
		oldtag	: uint16
	;;

	type rflush = struct
		tag	: uint16
	;;

	type twalk = struct
		tag	: uint16
		fid	: uint32
		newfid	: uint32
		nwname	: uint16
		wname	: byte[:][16]
	;;

	type rwalk = struct
		tag	: uint16
		nwqid	: uint16
		wqid	: qid[16]
	;;

	type topen = struct
		tag	: uint16
		fid	: uint32
		mode	: uint8
	;;

	type ropen = struct
		tag	: uint16
		qid	: qid
		iounit	: uint32
	;;

	type tcreate = struct
		tag	: uint16
		fid	: uint32
		name	: byte[:]
		perm	: uint32
		mode	: uint8
	;;

	type rcreate = struct
		tag	: uint16
		qid	: qid
		iounit	: uint32
	;;

	type tread = struct
		tag	: uint16
		fid	: uint32
		off	: uint64
		count	: uint32
	;;

	type rread = struct
		tag	: uint16
		data	: byte[:]
	;;

	type twrite = struct
		tag	: uint16
		fid	: uint32
		off	: uint64
		data	: byte[:]
	;;

	type rwrite = struct
		tag	: uint16
		count	: uint32
	;;

	type tclunk = struct
		tag	: uint16
		fid	: uint32
	;;

	type rclunk = struct
		tag	: uint16
	;;

	type tremove = struct
		tag	: uint16
		fid	: uint32
	;;

	type rremove = struct
		tag	: uint16
	;;

	type tstat = struct
		tag	: uint16
		fid	: uint32
	;;

	type rstat = struct
		tag	: uint16
		stat	: stat
	;;

	type twstat = struct
		tag	: uint16
		fid	: uint32
		stat	: stat
	;;

	type rwstat = struct
		tag	: uint16
	;;
	
	const unpackmsg	: (msgp : msg#, buf : byte[:] -> bool)
	const packmsg	: (msgp : msg#, buf : byte[:] -> std.option(std.size))
;;

const unpackmsg = {msgp, buf
	var len, oflow, kind, tag
	var tw, rw

	if buf.len < 5
		-> false
	;;

	len = gbit32(&buf)
	if buf.len + 4 < len
		-> false
	;;
	buf = buf[:len-4]
	oflow = false

	kind = gbit8(&buf)
	tag = gbit16(&buf)

	match kind
	| Tversion:
		msgp# = `Tversion [
			.tag=tag,
			.msize=gbit32(&buf),
			.version=gstr(&buf, &oflow)
		]
	| Rversion:
		msgp# = `Rversion [
			.tag=tag,
			.msize=gbit32(&buf),
			.version=gstr(&buf, &oflow)
		]
	| Tauth:
		msgp# = `Tauth [
			.tag=tag,
			.afid=gbit32(&buf),
			.uname=gstr(&buf, &oflow),
			.aname=gstr(&buf, &oflow),
		]
	| Rauth:
		msgp# = `Rauth [
			.tag=tag,
			.aqid=gqid(&buf),
		]
	| Tattach:
		msgp# = `Tattach [
			.tag=tag,
			.fid=gbit32(&buf),
			.afid=gbit32(&buf),
			.uname=gstr(&buf, &oflow),
			.aname=gstr(&buf, &oflow)
		]
	| Rattach:
		msgp# = `Rattach [
			.tag=tag,
			.qid=gqid(&buf),
		]
	| Rerror:
		msgp# = `Rerror [
			.tag=tag,
			.err=gstr(&buf, &oflow),
		]
	| Tflush:
		msgp# = `Tflush [
			.tag=tag,
			.oldtag=gbit16(&buf),
		]

	| Rflush:
		msgp# = `Rflush [
			.tag=tag,
		]
	| Twalk:
		twalkunpack(&buf, &tw, tag, &oflow)
		msgp# = `Twalk tw
	| Rwalk:
		rwalkunpack(&buf, &rw, tag, &oflow)
		msgp# = `Rwalk rw
	| Topen:
		msgp# = `Topen [
			.tag=tag,
			.fid=gbit32(&buf),
			.mode=gbit8(&buf)
		]
	| Ropen:
		msgp# = `Ropen [
			.tag=tag,
			.qid=gqid(&buf),
			.iounit=gbit32(&buf),
		]
	| Tcreate:
		msgp# = `Tcreate [
			.tag=tag,
			.fid=gbit32(&buf),
			.name=gstr(&buf, &oflow),
			.perm=gbit32(&buf),
			.mode=gbit8(&buf),
		]
	| Rcreate:
		msgp# = `Rcreate [
			.tag=tag,
			.qid=gqid(&buf),
			.iounit=gbit32(&buf),
		]
	| Tread:
		msgp# = `Tread [
			.tag=tag,
			.fid=gbit32(&buf),
			.off=gbit64(&buf),
			.count=gbit32(&buf)
		]
	| Rread:
		msgp# = `Rread [
			.tag=tag,
			.data=gdata(&buf, &oflow),
		]
	| Twrite:
		msgp# = `Twrite [
			.tag=tag,
			.fid=gbit32(&buf),
			.off=gbit64(&buf),
			.data=gdata(&buf, &oflow),
		]
	| Rwrite:
		msgp# = `Rwrite [
			.tag=tag,
			.count=gbit32(&buf),
		]
	| Tclunk:
		msgp# = `Tclunk [
			.tag=tag,
			.fid=gbit32(&buf),
		]
	| Rclunk:
		msgp# = `Rclunk [
			.tag=tag,
		]
	| Tremove:
		msgp# = `Tremove [
			.tag=tag,
			.fid=gbit32(&buf)
		]
	| Rremove:
		msgp# = `Rremove [
			.tag=tag,
		]
	| Tstat:
		msgp# = `Tstat [
			.tag=tag,
			.fid=gbit32(&buf),
		]
	| Rstat:
		msgp# = `Rstat [
			.tag=tag,
			.stat=gstat(&buf, &oflow),
		]
	| Twstat:
		msgp# = `Twstat [
			.tag=tag,
			.fid=gbit32(&buf),
			.stat=gstat(&buf, &oflow)
		]
	| Rwstat:
		msgp# = `Rwstat [
			.tag=tag
		]
	| _:
		-> false
	;;

	if oflow
		-> false
	;;
	-> true
}

const packmsg = {msgp, buf
	var b, sz
	
	/* leave packing the size for later */
	if buf.len < 4
		-> `std.None
	;;
	
	sz = 4
	b = buf[4:]
	match msgp#
	| `Tversion [.tag=tag, .msize=msize, .version=version]:
		sz += pbit8(&b, Tversion)
		sz += pbit16(&b, tag)
		sz += pbit32(&b, msize)
		sz += pstr(&b, version)
	| `Rversion [.tag=tag, .msize=msize, .version=version]:
		sz += pbit8(&b, Rversion)
		sz += pbit16(&b, tag)
		sz += pbit32(&b, msize)
		sz += pstr(&b, version)
	| `Tauth [.tag=tag, .afid=afid, .uname=uname, .aname=aname]:
		sz += pbit8(&b, Tauth)
		sz += pbit16(&b, tag)
		sz += pbit32(&b, afid)
		sz += pstr(&b, uname)
		sz += pstr(&b, aname)
	| `Rauth [.tag=tag, .aqid=aqid]:
		sz += pbit8(&b, Rauth)
		sz += pbit16(&b, tag)
		sz += pqid(&b, aqid)
	| `Tattach [.tag=tag, .fid=fid, .afid=afid, .uname=uname, .aname=aname]:
		sz += pbit8(&b, Tattach)
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
		sz += pbit32(&b, afid)
		sz += pstr(&b, uname)
		sz += pstr(&b, aname)
	| `Rattach [.tag=tag, .qid=qid]:
		sz += pbit8(&b, Rattach)
		sz += pbit16(&b, tag)
		sz += pqid(&b, qid)
	| `Rerror [.tag=tag, .err=err]:
		sz += pbit8(&b, Rerror);
		sz += pbit16(&b, tag)
		sz += pstr(&b, err)
	| `Tflush [.tag=tag, .oldtag=ot]:
		sz += pbit8(&b, Tflush)
		sz += pbit16(&b, tag)
		sz += pbit16(&b, ot)
	| `Rflush [.tag=tag]:
		sz += pbit8(&b, Rflush)
		sz += pbit16(&b, tag)
	| `Twalk [.tag=tag, .fid=fid, .newfid=newfid, .nwname=nwname, .wname=wname]:
		sz += pbit8(&b, Twalk);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
		sz += pbit32(&b, newfid)
		sz += pbit16(&b, nwname)
		for var i = 0; i < nwname; i++
			sz += pstr(&b, wname[i])
		;;
	| `Rwalk [.tag=tag, .nwqid=nwqid, .wqid=wqid]:
		sz += pbit8(&b, Rwalk);
		sz += pbit16(&b, tag)
		sz += pbit16(&b, nwqid)
		for var i = 0; i < nwqid; i++
			sz += pqid(&b, wqid[i])
		;;
	| `Topen [.tag=tag, .fid=fid, .mode=mode]:
		sz += pbit8(&b, Topen);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
		sz += pbit8(&b, mode)
	| `Ropen [.tag=tag, .qid=qid, .iounit=iounit]:
		sz += pbit8(&b, Ropen);
		sz += pbit16(&b, tag)
		sz += pqid(&b, qid)
		sz += pbit32(&b, iounit)
	| `Tcreate [.tag=tag, .fid=fid, .name=name, .perm=perm, .mode=mode]:
		sz += pbit8(&b, Tcreate);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
		sz += pstr(&b, name)
		sz += pbit32(&b, perm)
		sz += pbit8(&b, mode)
	| `Rcreate [.tag=tag, .qid=qid, .iounit=iounit]:
		sz += pbit8(&b, Rcreate);
		sz += pbit16(&b, tag)
		sz += pqid(&b, qid)
		sz += pbit32(&b, iounit)
	| `Tread [.tag=tag, .fid=fid, .off=off, .count=count]:
		sz += pbit8(&b, Tread);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
		sz += pbit64(&b, off)
		sz += pbit32(&b, count)
	| `Rread [.tag=tag, .data=data]:
		sz += pbit8(&b, Rread);
		sz += pbit16(&b, tag)
		sz += pdata(&b, data)
	| `Twrite [.tag=tag, .fid=fid, .off=off, .data=data]:
		sz += pbit8(&b, Twrite);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
		sz += pbit64(&b, off)
		sz += pdata(&b, data)
	| `Rwrite [.tag=tag, .count=count]:
		sz += pbit8(&b, Rwrite);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, count)
	| `Tclunk [.tag=tag, .fid=fid]:
		sz += pbit8(&b, Tclunk);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
	| `Rclunk [.tag=tag]:
		sz += pbit8(&b, Rclunk);
		sz += pbit16(&b, tag)
	| `Tremove [.tag=tag, .fid=fid]:
		sz += pbit8(&b, Tremove);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
	| `Rremove [.tag=tag]:
		sz += pbit8(&b, Rremove);
		sz += pbit16(&b, tag)
	| `Tstat [.tag=tag, .fid=fid]:
		sz += pbit8(&b, Tstat);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
	| `Rstat [.tag=tag, .stat=stat]:
		sz += pbit8(&b, Rstat);
		sz += pbit16(&b, tag)
		sz += pstat(&b, &stat)
	| `Twstat [.tag=tag, .fid=fid, .stat=stat]:
		sz += pbit8(&b, Twstat);
		sz += pbit16(&b, tag)
		sz += pbit32(&b, fid)
		sz += pstat(&b, &stat)
	| `Rwstat [.tag=tag]:
		sz += pbit8(&b, Rwstat);
		sz += pbit16(&b, tag)
	;;

	if sz > buf.len
		-> `std.None
	;;
	std.putle32(buf[:4], sz)
	-> `std.Some sz
}

const twalkunpack = {b, w, tag, oflow
	w.tag = tag
	w.fid = gbit32(b)
	w.newfid = gbit32(b)
	w.nwname = gbit16(b)
	if w.nwname > 16
		oflow# = true
	else
		for var i = 0; i < w.nwname; i++
			w.wname[i] = gstr(b, oflow)
		;;
	;;
}

const rwalkunpack = {b, w, tag, oflow
	w.tag = tag
	w.nwqid = gbit16(b)
	if w.nwqid > 16
		oflow# = true
	else
		for var i = 0; i < w.nwqid; i++
			w.wqid[i] = gqid(b)
		;;
	;;
}

const gbit8 : (bp : byte[:]# -> uint8)= {bp
	var v : uint8

	v = 0
	if bp#.len >= 1
		v = std.getle8(bp#[:1])
		bp# = bp#[1:]
	;;
	-> v
}

const gbit16 = {bp
	var v

	v = 0
	if bp#.len >= 2
		v = std.getle16(bp#[:2])
		bp# = bp#[2:]
	;;
	-> v
}

const gbit32 = {bp
	var v

	v = 0
	if bp#.len >= 4
		v = std.getle32(bp#[:4])
		bp# = bp#[4:]
	;;
	-> v
}

const gbit64 = {bp
	var v

	v = 0
	if bp#.len >= 8
		v = std.getle64(bp#[:8])
		bp# = bp#[8:]
	;;
	-> v
}

const gstr = {bp, oflow
	var v, len

	if bp#.len < 2
		-> ""
	;;
	len = gbit16(bp)
	if bp#.len < len
		oflow# = true
		-> ""
	;;
	v  = bp#[:len]
	bp# = bp#[len:]
	-> v

}

const gdata = {bp, oflow
	var v, len

	if bp#.len < 4
		-> ""
	;;
	len = gbit32(bp)
	if bp#.len < len
		oflow# = true
		-> ""
	;;
	v  = bp#[:len]
	bp# = bp#[len:]
	-> v

}

const gstat = {bp, oflow
	var st
	var sz

	sz = gbit16(bp)
	sz = gbit16(bp)
	st.ty = gbit16(bp)
	st.dev = gbit32(bp)
	st.qid.ty = gbit8(bp)
	st.qid.vers = gbit32(bp)
	st.qid.path = gbit64(bp)
	st.mode = gbit32(bp)
	st.atime = gbit32(bp)
	st.mtime = gbit32(bp)
	st.len = gbit64(bp)
	st.name = gstr(bp, oflow)
	st.uid = gstr(bp, oflow)
	st.gid = gstr(bp, oflow)
	st.muid = gstr(bp, oflow)
	-> st
}

const gqid = {bp
	var q

	q.ty = gbit8(bp)
	q.vers = gbit32(bp)
	q.path = gbit64(bp)
	-> q
}

const pbit8 = {bp, v
	if bp#.len >= 1
		std.putle8(bp#[:1], v)
		bp# = bp#[1:]
	;;
	-> 1
}

const pbit16 = {bp, v
	if bp#.len >= 2
		std.putle16(bp#[:2], v)
		bp# = bp#[2:]
	;;
	-> 2
}

const pbit32 = {bp, v
	if bp#.len >= 4
		std.putle32(bp#[:4], v)
		bp# = bp#[4:]
	;;
	-> 4
}

const pbit64 = {bp, v
	if bp#.len >= 8
		std.putle64(bp#[:8], v)
		bp# = bp#[8:]
	;;
	-> 8
}

const pstr = {bp, v
	if bp#.len >= 2 + v.len
		std.putle16(bp#[:2], v.len)
		std.slcp(bp#[2:v.len+2], v)
		bp# = bp#[v.len + 2:]
	;;
	-> 2 + v.len
}

const pdata = {bp, v
	if bp#.len >= 4 + v.len
		std.putle32(bp#[:4], v.len)
		for var i = 0; i < v.len; i++
			bp#[i + 4] = v[i]
		;;
		bp# = bp#[v.len:]
	;;
	-> v.len + 4
}

const pqid = {bp, v
	var sz

	sz = 0
	sz += pbit8(bp, v.ty)
	sz += pbit32(bp, v.vers)
	sz += pbit64(bp, v.path)
	-> sz
}

const pstat = {bp, st
	var sz
	var statsize

	statsize = Statfixsz + \
		st.name.len + \
		st.uid.len + \
		st.gid.len + \
		st.muid.len

	sz = 0
	sz += pbit16(bp, (statsize : uint16))
	sz += pbit16(bp, (statsize : uint16) - 2)
	sz += pbit16(bp, st.ty)
	sz += pbit32(bp, st.dev)
	sz += pbit8(bp, st.qid.ty)
	sz += pbit32(bp, st.qid.vers)
	sz += pbit64(bp, st.qid.path)
	sz += pbit32(bp, st.mode)
	sz += pbit32(bp, st.atime)
	sz += pbit32(bp, st.mtime)
	sz += pbit64(bp, st.len)
	sz += pstr(bp, st.name)
	sz += pstr(bp, st.uid)
	sz += pstr(bp, st.gid)
	sz += pstr(bp, st.muid)
	-> sz
}
