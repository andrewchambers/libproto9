use std

pkg proto9 =
	
	const HeaderSize = 4 + 1
	const ReadOverhead = HeaderSize + 4
	const WriteOverhead = HeaderSize + 4 + 8 + 4
	
	const NoTag : uint16 = 0xffff
	const NoFid : uint32 = 0xffffffff
	
	const Dmdir    : uint32 = 0x80000000
	const Dmappend : uint32 = 0x40000000
	const Dmexcl   : uint32 = 0x20000000
	const Dmmount  : uint32 = 0x10000000
	const Dmauth   : uint32 = 0x08000000
	const Dmtmp    : uint32 = 0x04000000
	const Dmread   : uint32 = 0x4
	const Dmwrite  : uint32 = 0x2
	const Dmexec   : uint32 = 0x1
	
	const Qtfile   : uint8 = 0x00
	const Qttmp    : uint8 = 0x04
	const Qtauth   : uint8   = 0x08
	const Qtmount  : uint8  = 0x10
	const Qtexcl   : uint8   = 0x20
	const Qtappend : uint8 = 0x40
	const Qtdir    : uint8   = 0x80
	
	type msg = union
		`Tversion	version
		`Rversion	version
		`Tauth	tauth
		`Rauth	rauth
		`Rerror	rerror
		`Tflush	tflush
		`Rflush	rflush
		`Tattach	tattach
		`Rattach	rattach
		`Twalk	twalk
		`Rwalk	rwalk
		`Topen	topen
		`Ropen	ropen
		`Tcreate	tcreate
		`Rcreate	rcreate
		`Tread	tread
		`Rread	rread
		`Twrite	twrite
		`Rwrite	rwrite
		`Tstat	tstat
		`Rstat	rstat
		`Tclunk	tclunk
		`Rclunk	rclunk
		`Tremove	tremove
		`Rremove	rremove
		`Twstat	twstat
		`Rwstat	rwstat
	;;
	
	const qidlen : uint32 = 13
	
	type qid = struct
		ty	: uint8
		vers	: uint32
		path	: uint64
	;;

	type stat = struct
		ty	: uint16
		dev	: uint32
		qid	: qid
		mode	: uint32
		atime	: uint32
		mtime	: uint32
		len	: uint64
		name	: byte[:]
		uid	: byte[:]
		gid	: byte[:]
		muid	: byte[:]
	;;

	type version = struct
		tag	: uint16
		size	: uint32
		version	: byte[:]
	;;

	type tauth = struct
		tag	: uint16
		afid	: uint32
		uname	: byte[:]
		aname	: byte[:]
	;;

	type rauth = struct
		tag	: uint16
		aqid	: qid
	;;

	type rerror = struct
		tag	: uint16
		err	: byte[:]
	;;

	type tflush = struct
		tag	: uint16
		oldtag	: uint16
	;;

	type rflush = struct
		tag	: uint16
	;;

	type tattach = struct
		tag	: uint16
		fid	: uint32
		afid	: uint32
		uname	: byte[:]
		aname	: byte[:]
	;;
	
	type rattach = struct
		tag	: uint16
		qid	: qid
	;;

	type twalk = struct
		tag	: uint16
		fid	: uint32
		newfid	: uint32
		nwnames	: uint16
		wnames	: byte[:][16]
	;;

	type rwalk = struct
		tag	: uint16
		nnwqid	: uint16
		nwqid	: qid[16]
	;;

	type topen = struct
		tag	: uint16
		fid	: uint32
		mode	: uint8
	;;

	type ropen = struct
		tag	: uint16
		qid	: qid
		iounit	: uint32
	;;

	type tcreate = struct
		tag	: uint16
		fid	: uint32
		name	: byte[:]
		perm	: uint32
		mode	: uint8
	;;

	type rcreate = struct
		tag	: uint16
		qid	: qid
		iounit	: uint32
	;;

	type tread = struct
		tag	: uint16
		fid	: uint32
		off	: uint64
		count	: uint32
	;;

	type rread = struct
		tag	: uint16
		data	: byte[:]
	;;

	type twrite = struct
		tag	: uint16
		fid	: uint32
		off	: uint64
		data	: byte[:]
	;;

	type rwrite = struct
		tag	: uint16
		count	: uint32
	;;

	type tclunk = struct
		tag	: uint16
		fid	: uint32
	;;

	type rclunk = struct
		tag	: uint16
	;;

	type tremove = struct
		tag	: uint16
		fid	: uint32
	;;

	type rremove = struct
		tag	: uint16
	;;

	type tstat = struct
		tag	: uint16
		fid	: uint32
	;;

	type rstat = struct
		tag	: uint16
		stat	: stat
	;;

	type twstat = struct
		tag	: uint16
		fid	: uint32
		stat	: stat
	;;

	type rwstat = struct
		tag	: uint16
	;;
	
	const unpackmsg	: (buf : byte[:] -> std.option(msg))
	const packmsg	: (buf : byte[:], m : msg -> std.option(byte[:]))
;;

const Mt_tversion	: byte = 100
const Mt_rversion	: byte = 101
const Mt_tauth		: byte = 102
const Mt_rauth		: byte = 103
const Mt_tattach	: byte = 104
const Mt_rattach	: byte = 105
const Mt_rerror		: byte = 107
const Mt_tflush		: byte = 108
const Mt_rflush		: byte = 109
const Mt_twalk 		: byte = 110
const Mt_rwalk		: byte = 111
const Mt_topen		: byte = 112
const Mt_ropen		: byte = 113
const Mt_tcreate	: byte = 114
const Mt_rcreate	: byte = 115
const Mt_tread		: byte = 116
const Mt_rread		: byte = 117
const Mt_twrite		: byte = 118
const Mt_rwrite		: byte = 119
const Mt_tclunk		: byte = 120
const Mt_rclunk		: byte = 121
const Mt_tremove	: byte = 122
const Mt_rremove	: byte = 123
const Mt_tstat		: byte = 124
const Mt_rstat		: byte = 125
const Mt_twstat		: byte = 126
const Mt_rwstat		: byte = 127

const unpackmsg = {buf
	if buf.len < 5
		-> `std.None
	;;
	match buf[4]
	| Mt_tversion:
		-> unpack_tversion(buf[5:])
	| Mt_rversion:
		-> unpack_rversion(buf[5:])
	| Mt_tauth:
		-> unpack_tauth(buf[5:])
	| Mt_rauth:
		-> unpack_rauth(buf[5:])
	| Mt_tattach:
		-> unpack_tattach(buf[5:])
	| Mt_rattach:
		-> unpack_rattach(buf[5:])
	| Mt_rerror:
		-> unpack_rerror(buf[5:])
	| Mt_tflush:
		-> unpack_tflush(buf[5:])
	| Mt_rflush:
		-> unpack_rflush(buf[5:])
	| Mt_twalk:
		-> unpack_twalk(buf[5:])
	| Mt_rwalk:
		-> unpack_rwalk(buf[5:])
	| Mt_topen:
		-> unpack_topen(buf[5:])
	| Mt_ropen:
		-> unpack_ropen(buf[5:])
	| Mt_tcreate:
		-> unpack_tcreate(buf[5:])
	| Mt_rcreate:
		-> unpack_rcreate(buf[5:])
	| Mt_tread:
		-> unpack_tread(buf[5:])
	| Mt_rread:
		-> unpack_rread(buf[5:])
	| _:
		-> `std.None
	;;
}

const packmsg = {buf, msg
	var packed
	
	if buf.len < 4
		-> `std.None
	;;
	
	match msg
	| `Tversion m:
		buf[4] = Mt_tversion
		packed = pack_version(buf[5:], m)
	| `Rversion m:
		buf[4] = Mt_rversion
		packed = pack_version(buf[5:], m)
	| `Tauth m:
		buf[4] = Mt_tauth
		packed = pack_tauth(buf[5:], m)
	| `Rauth m:
		buf[4] = Mt_rauth
		packed = pack_rauth(buf[5:], m)
	| `Tattach m:
		buf[4] = Mt_tattach
		packed = pack_tattach(buf[5:], m)
	| `Rattach m:
		buf[4] = Mt_rattach
		packed = pack_rattach(buf[5:], m)
	| `Rerror m:
		buf[4] = Mt_rerror
		packed = pack_rerror(buf[5:], m)
	| `Tflush m:
		buf[4] = Mt_tflush
		packed = pack_tflush(buf[5:], m)
	| `Rflush m:
		buf[4] = Mt_rflush
		packed = pack_rflush(buf[5:], m)
	| `Twalk m:
		buf[4] = Mt_twalk
		packed = pack_twalk(buf[5:], m)
	| `Rwalk m:
		buf[4] = Mt_rwalk
		packed = pack_rwalk(buf[5:], m)
	| `Topen m:
		buf[4] = Mt_topen
		packed = pack_topen(buf[5:], m)
	| `Ropen m:
		buf[4] = Mt_ropen
		packed = pack_ropen(buf[5:], m)
	| `Tcreate m:
		buf[4] = Mt_tcreate
		packed = pack_tcreate(buf[5:], m)
	| `Rcreate m:
		buf[4] = Mt_rcreate
		packed = pack_rcreate(buf[5:], m)
	| `Tread m:
		buf[4] = Mt_tread
		packed = pack_tread(buf[5:], m)
	| `Rread m:
		buf[4] = Mt_rread
		packed = pack_rread(buf[5:], m)
	| _:
		std.fatal("FAIL! :P\n")
	;;
	
	match packed
	| `std.None:
		-> `std.None
	| `std.Some msgbuf:
		std.putle32(buf[0:4], msgbuf.len + 5)
		-> `std.Some buf[0:5+msgbuf.len]
	;;
}

const pack_version = {buf, msg
	var sz : uint32 = 2 + 4 + 2 + msg.version.len
	var off : uint32
	
	if buf.len < sz
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle32(buf[2:6], msg.size)
	std.putle16(buf[6:8], msg.version.len)
	off = 8
	std.slcp(buf[off:off+msg.version.len], msg.version)
	off += msg.version.len
	-> `std.Some buf[0:off]
}

const unpack_version = {buf
	var len : uint32 = 2 + 4 + 2
	var verlen : uint32
	
	if buf.len < len
		-> `std.None
	;;
	verlen = std.getle16(buf[6:8])
	len += verlen
	if buf.len < len
		-> `std.None
	;;
	-> `std.Some [
		.tag=std.getle16(buf[0:2]),
		.size=std.getle32(buf[2:6]),
		.version=buf[8:8+verlen],
	]
}

const pack_tversion = {buf, msg
	-> pack_version(buf, msg)
}

const unpack_tversion = {buf
	match unpack_version(buf)
	| `std.Some m:
		-> `std.Some `Tversion m
	| `std.None:
		-> `std.None
	;;
}

const pack_rversion = {buf, msg
	-> pack_version(buf, msg)
}

const unpack_rversion = {buf
	match unpack_version(buf)
	| `std.Some m:
		-> `std.Some `Rversion m
	| `std.None:
		-> `std.None
	;;
}

const pack_tauth = {buf, msg -> std.option(byte[:])
	var sz : uint32 = 2 + 4 + 2 + msg.uname.len + msg.aname.len
	var off : uint32
	
	if buf.len < sz
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle32(buf[2:6], msg.afid)
	std.putle16(buf[6:8], msg.uname.len)
	off = 8
	std.slcp(buf[off:off+msg.uname.len], msg.uname)
	off += msg.uname.len
	std.putle16(buf[off:off+2], msg.aname.len)
	off += 2
	std.slcp(buf[off:off+msg.aname.len], msg.aname)
	off += msg.aname.len
	-> `std.Some buf[0:off]
}

const unpack_tauth = {buf
	var off : uint32 = 0
	var anamelen : uint32
	var anameoff : uint32
	var unamelen : uint32
	var unameoff : uint32
	
	off = 6
	if buf.len < off + 2
		-> `std.None
	;;
	unamelen = std.getle16(buf[off:off+2])
	off += 2
	unameoff = off
	off += unamelen 
	if buf.len < off + 2
		-> `std.None
	;;
	anamelen = std.getle16(buf[off:off+2])
	off += 2
	anameoff = off
	off += anamelen 
	
	-> `std.Some `Tauth [
		.tag=std.getle16(buf[0:2]),
		.afid=std.getle32(buf[2:6]),
		.uname=buf[unameoff:unameoff+unamelen],
		.aname=buf[anameoff:anameoff+anamelen],
	]
}

const pack_qid = {buf, qid : qid
	if buf.len < qidlen
		-> `std.None
	;;
	std.putle8(buf[0:1], qid.ty)
	std.putle32(buf[1:5], qid.vers)
	std.putle64(buf[5:13], qid.path)
	-> `std.Some buf[:qidlen]
}

const pack_rauth = {buf, msg
	if buf.len < 2 + qidlen
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	match pack_qid(buf[2:], msg.aqid)
	| `std.Some q:
		-> `std.Some buf[:2+q.len]
	| `std.None:
		-> `std.None
	;;
}

const unpack_qid = {buf
	var qid : qid
	
	if buf.len != qidlen
		-> `std.None
	;;
	qid.ty = std.getle8(buf[0:1])
	qid.vers = std.getle32(buf[1:5])
	qid.path = std.getle64(buf[5:13])
	-> `std.Some qid
}

const unpack_rauth = {buf
	if buf.len < 2 + qidlen
		-> `std.None
	;;
	match unpack_qid(buf[2:2+qidlen])
	| `std.Some qid:
		-> `std.Some `Rauth [
			.tag=std.getle16(buf[0:2]),
			.aqid=qid,
		]
	| `std.None:
		-> `std.None
	;;
}

const pack_rerror = {buf, msg
	var sz : uint32 = 2 + 2 + msg.err.len
	
	if buf.len < sz
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle16(buf[2:4], msg.err.len)
	std.slcp(buf[4:4+msg.err.len], msg.err)
	-> `std.Some buf[0:4+msg.err.len]
}

const unpack_rerror = {buf
	var errlen : uint32
	
	if buf.len < 4
		-> `std.None
	;;
	errlen = std.getle16(buf[2:4])
	if buf.len < errlen + 4
		-> `std.None
	;;
	-> `std.Some `Rerror [
		.tag=std.getle16(buf[0:2]),
		.err=buf[4:4+errlen],
	]
}

const pack_tattach = {buf, msg -> std.option(byte[:])
	var sz : uint32 = 2 + 4 + 4 + 2 + msg.uname.len + msg.aname.len
	var off : uint32
	
	if buf.len < sz
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle32(buf[2:6], msg.fid)
	std.putle32(buf[6:10], msg.afid)
	std.putle16(buf[10:12], msg.uname.len)
	off = 12
	std.slcp(buf[off:off+msg.uname.len], msg.uname)
	off += msg.uname.len
	std.putle16(buf[off:off+2], msg.aname.len)
	off += 2
	std.slcp(buf[off:off+msg.aname.len], msg.aname)
	off += msg.aname.len
	-> `std.Some buf[0:off]
}

const unpack_tattach = {buf
	var off : uint32 = 0
	var anamelen : uint32
	var anameoff : uint32
	var unamelen : uint32
	var unameoff : uint32
	
	off = 10
	if buf.len < off + 2
		-> `std.None
	;;
	unamelen = std.getle16(buf[off:off+2])
	off += 2
	unameoff = off
	off += unamelen 
	if buf.len < off + 2
		-> `std.None
	;;
	anamelen = std.getle16(buf[off:off+2])
	off += 2
	anameoff = off
	off += anamelen 
	
	-> `std.Some `Tattach [
		.tag=std.getle16(buf[0:2]),
		.fid=std.getle32(buf[2:6]),
		.afid=std.getle32(buf[6:10]),
		.uname=buf[unameoff:unameoff+unamelen],
		.aname=buf[anameoff:anameoff+anamelen],
	]
}

const pack_rattach = {buf, msg
	if buf.len < 2 + qidlen
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	match pack_qid(buf[2:], msg.qid)
	| `std.Some q:
		-> `std.Some buf[:2+q.len]
	| `std.None:
		-> `std.None
	;;
}

const unpack_rattach = {buf
	if buf.len < 2 + qidlen
		-> `std.None
	;;
	match unpack_qid(buf[2:2+qidlen])
	| `std.Some qid:
		-> `std.Some `Rattach [
			.tag=std.getle16(buf[0:2]),
			.qid=qid,
		]
	| `std.None:
		-> `std.None
	;;
}

const pack_tflush = {buf, msg
	if buf.len < 2 + 2
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle16(buf[2:4], msg.oldtag)
	-> `std.Some buf[0:4]
}

const unpack_tflush = {buf
	if buf.len < 2 + 2
		-> `std.None
	;;
	-> `std.Some `Tflush [
		.tag=std.getle16(buf[0:2]),
		.oldtag=std.getle16(buf[2:4]),
	]
}

const pack_rflush = {buf, msg
	if buf.len < 2
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	-> `std.Some buf[0:2]
}

const unpack_rflush = {buf
	if buf.len < 2
		-> `std.None
	;;
	-> `std.Some `Rflush [
		.tag=std.getle16(buf[0:2]),
	]
}

const pack_twalk = {buf, msg
	var sz : uint32
	var off : uint32

	sz = 2 + 4 + 4 + 2 + 2*(msg.nwnames castto(uint32))
	for var i = 0; i < msg.nwnames; i++
		sz += msg.wnames[i].len
	;;
	if buf.len < sz
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle32(buf[2:6], msg.fid)
	std.putle32(buf[6:10], msg.newfid)
	std.putle16(buf[10:12], msg.nwnames)
	off = 12
	for var i = 0; i < msg.nwnames; i++
		std.putle16(buf[off:off+2], msg.wnames[i].len)
		off += 2
		std.slcp(buf[off:off+msg.wnames[i].len], msg.wnames[i])
		off += msg.wnames[i].len
	;;
	-> `std.Some buf[:off]
}

const unpack_twalk = {buf
	var off : uint32 = 2 + 4 + 4 + 2
	var nlen : uint32
	var walk

	for var i = 0; i < 16; i++
		walk.wnames[i] = ""
	;;

	if buf.len < off
		-> `std.None
	;;

	walk.tag = std.getle16(buf[0:2])
	walk.fid = std.getle32(buf[2:6])
	walk.newfid = std.getle32(buf[6:10])
	walk.nwnames = std.getle16(buf[10:12])
	if walk.nwnames > 16
		-> `std.None
	;;
	for var i = 0; i < walk.nwnames; i++
		if buf.len < off + 2
			-> `std.None
		;;
		nlen = std.getle16(buf[off:off+2])
		off += 2
		if buf.len < off + nlen
			-> `std.None
		;;
		walk.wnames[i] = buf[off:off+nlen]
		off += nlen
	;;
	-> `std.Some `Twalk walk
}

const pack_rwalk = {buf, msg
	var sz : uint32
	var off : uint32

	sz = 2 + 2 + qidlen*(msg.nnwqid castto(uint32))
	if buf.len < sz
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle16(buf[2:4], msg.nnwqid)
	off = 4
	for var i = 0; i < msg.nnwqid; i++
		std.get(pack_qid(buf[off:off+qidlen], msg.nwqid[i]))
		off += qidlen
	;;
	-> `std.Some buf[:off]
}

const unpack_rwalk = {buf
	var off : uint32 = 2 + 2
	var walk

	if buf.len < off
		-> `std.None
	;;
	walk.tag = std.getle16(buf[0:2])
	walk.nnwqid = std.getle16(buf[2:4])
	if walk.nnwqid > 16
		-> `std.None
	;;
	for var i = 0; i < walk.nnwqid; i++
		match unpack_qid(buf[off:off+qidlen])
		| `std.Some qid:
			walk.nwqid[i] = qid
		| `std.None:
			-> `std.None
		;;
		off += qidlen
	;;
	-> `std.Some `Rwalk walk
}

const pack_topen = {buf, msg
	if buf.len < 2 + 4 + 1
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle32(buf[2:6], msg.fid)
	std.putle8(buf[6:7], msg.mode)
	-> `std.Some buf[0:7]
}

const unpack_topen = {buf
	if buf.len < 2 + 4 + 1
		-> `std.None
	;;
	-> `std.Some `Topen [
		.tag=std.getle16(buf[0:2]),
		.fid=std.getle32(buf[2:6]),
		.mode=std.getle8(buf[6:7])
	]
}

const pack_ropen = {buf, msg
	if buf.len < 2 + qidlen + 4
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.get(pack_qid(buf[2:2+qidlen], msg.qid))
	std.putle32(buf[2+qidlen:2+qidlen+4], msg.iounit)
	-> `std.Some buf[0:2+qidlen+4]
}

const unpack_ropen = {buf
	if buf.len < 2 + qidlen + 4
		-> `std.None
	;;
	-> `std.Some `Ropen [
		.tag=std.getle16(buf[0:2]),
		.qid=std.get(unpack_qid(buf[2:2+qidlen])),
		.iounit=std.getle32(buf[2+qidlen:2+qidlen+4])
	]
}

const pack_tcreate = {buf, msg
	var off : uint32

	if buf.len < 2 + 4 + 2 + msg.name.len + 4 + 1
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle32(buf[2:6], msg.fid)
	std.putle16(buf[6:8], msg.name.len)
	std.slcp(buf[8:8+msg.name.len], msg.name)
	off = 8 + msg.name.len
	std.putle32(buf[off:off+4], msg.perm)
	off += 4
	std.putle8(buf[off:off+1], msg.mode)
	off += 1
	-> `std.Some buf[0:off]
}

const unpack_tcreate= {buf
	var off : uint32
	var namelen : uint32
	var name

	if buf.len < 2 + 4 + 2
		-> `std.None
	;;

	namelen = std.getle16(buf[6:8])
	off = 8
	if buf.len < off+namelen
		-> `std.None
	;;
	name = buf[off:off+namelen]
	off += namelen
	if buf.len < off + 5
		-> `std.None
	;;

	-> `std.Some `Tcreate [
		.tag=std.getle16(buf[0:2]),
		.fid=std.getle32(buf[2:6]),
		.name=name,
		.perm=std.getle32(buf[off:off+4]),
		.mode=std.getle8(buf[off+4:off+5]),
	]
}

const pack_rcreate = {buf, msg
	if buf.len < 2 + qidlen + 4
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.get(pack_qid(buf[2:2+qidlen], msg.qid))
	std.putle32(buf[2+qidlen:2+qidlen+4], msg.iounit)
	-> `std.Some buf[0:2+qidlen+4]
}

const unpack_rcreate = {buf
	if buf.len < 2 + qidlen + 4
		-> `std.None
	;;
	-> `std.Some `Rcreate [
		.tag=std.getle16(buf[0:2]),
		.qid=std.get(unpack_qid(buf[2:2+qidlen])),
		.iounit=std.getle32(buf[2+qidlen:2+qidlen+4])
	]
}

const pack_tread = {buf, msg
	if buf.len < 2 + 4 + 8 + 4
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle32(buf[2:6], msg.fid)
	std.putle64(buf[6:14], msg.off)
	std.putle32(buf[14:18], msg.count)
	-> `std.Some buf[:18]
}

const unpack_tread = {buf
	if buf.len < 2 + 4 + 8 + 4
		-> `std.None
	;;
	-> `std.Some `Tread [
		.tag = std.getle16(buf[0:2]),
		.fid = std.getle32(buf[2:6]),
		.off = std.getle64(buf[6:14]),
		.count = std.getle32(buf[14:18]),
	]
}

const pack_rread = {buf, msg
	if buf.len < 2 + 4 + msg.data.len
		-> `std.None
	;;
	std.putle16(buf[0:2], msg.tag)
	std.putle32(buf[2:6], msg.data.len)
	std.slcp(buf[6:6+msg.data.len], msg.data)
	-> `std.Some buf[0:6+msg.data.len]
}

const unpack_rread = {buf
	var datalen : uint32

	if buf.len < 2 + 4
		-> `std.None
	;;
	datalen = std.getle32(buf[2:6])
	-> `std.Some `Rread [
		.tag = std.getle16(buf[0:2]),
		.data = buf[6:6+datalen]
	]
}
