use proto9
use std

type msgtestcase = struct
	msg : proto9.msg
	data : byte[:]
;;

const testmsg = {
	var buf1, buf2, msg, packed, repacked
	
	buf1 = std.slalloc(4096)
	buf2 = std.slalloc(4096)

	var testcases : msgtestcase[:] = [
		[
			.msg=`proto9.Tversion [
				.tag=45,
				.size=9384,
				.version="9P2000",
			],
			.data=[0x13, 0x0, 0x0, 0x0, 0x64, 0x2d, 0x0, 0xa8, 0x24, 0x0, 0x0, 0x6, 0x0, 0x39, 0x50, 0x32, 0x30, 0x30, 0x30][:]
		],
		[
			.msg=`proto9.Rversion [
				.tag=45,
				.size=9384,
				.version="9P2000",
			],
			.data=[0x13, 0x0, 0x0, 0x0, 0x65, 0x2d, 0x0, 0xa8, 0x24, 0x0, 0x0, 0x6, 0x0, 0x39, 0x50, 0x32, 0x30, 0x30, 0x30][:]
		],
		[
			.msg=`proto9.Tauth [
				.tag=45,
				.afid=1234,
				.uname="someone",
				.aname="something",
			],
			.data=[0x1f, 0x0, 0x0, 0x0, 0x66, 0x2d, 0x0, 0xd2, 0x4, 0x0, 0x0, 0x7, 0x0, 0x73, 0x6f, 0x6d, 0x65, 0x6f, 0x6e, 0x65, 0x9, 0x0, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67][:]
		],
		[
			.msg=`proto9.Rauth [
				.tag=45,
				.aqid=[.ty=0, .vers=0, .path=0]
			],
			.data=[0x14, 0x0, 0x0, 0x0, 0x67, 0x2d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0][:]
		],
		[
			.msg=`proto9.Rauth [
				.tag=0x0101,
				.aqid=[.ty=0xff, .vers=0xffffffff, .path=0xffffffffffffffff]
			],
			.data=[0x14, 0x0, 0x0, 0x0, 0x67, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff][:]
		],
		[
			.msg=`proto9.Rerror [
				.tag=45,
				.err="something something something",
			],
			.data=[0x26, 0x0, 0x0, 0x0, 0x6b, 0x2d, 0x0, 0x1d, 0x0, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x6f, 0x6d, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67][:]
		],
	][:]

	for tc in testcases
		match proto9.packmsg(buf1, tc.msg)
		| `std.Some p:
			packed = p
		| `std.None:
			std.fatal("packing {} failed\n", tc.msg)
		;;
		if !std.sleq(packed, tc.data)
			std.fput(std.Err, "packing failed: {}\n", tc.msg)
			std.fatal("expected {r}\ngot      {r}\n", tc.data, packed)
		;;
		match proto9.unpackmsg(packed)
		| `std.Some m:
			msg = m
		| `std.None:
			std.fatal("reading {r} failed\n", packed)
		;;
		match proto9.packmsg(buf2, msg)
		| `std.Some p:
			repacked = p
		| `std.None:
	 		std.fatal("repacking {} failed\n", tc.msg)
	 	;;
		if !std.sleq(repacked, tc.data)
			std.fatal("repackpack failed:\nexpected {r}\ngot      {r}\n", tc.data, repacked)
		;;
	;;

}

const main = {
	testmsg()
}

